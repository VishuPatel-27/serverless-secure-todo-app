# .github/workflows/backend-workflow.yaml
# This GitHub Actions workflow file is used to automate the build and deployment process for the Todo App backend.
# It includes steps for checking out the code, installing dependencies, running tests, and deploying the application.
# It uses the AWS SAM CLI for building and deploying the serverless application.
# It also includes caching for dependencies to speed up the workflow.
# The workflow is defined in YAML format and follows the GitHub Actions syntax.

# Workflow name
name: Todo App Backend Workflow

# Default settings for the workflow
# This section sets the default working directory for all run steps in the workflow.
defaults:
  run:
    working-directory: sam-backend-todo-app

# Trigger conditions for the workflow
# The workflow is triggered on pushes and pull requests to the main branch.
on:
  push:
    branches:
      - main
    paths:
      - 'sam-backend-todo-app/**'
      - '.github/workflows/backend-workflow.yml'
  # This allows manual triggering of the workflow from the GitHub Actions UI.
  workflow_dispatch: {}

# Permissions for the workflow
# This section defines the permissions required for the workflow.
permissions: read-all
    
# Define the jobs that will run in this workflow
# Each job runs in a separate environment and can have its own steps.
# Jobs run in parallel by defult therefore to ensure they run sequentially,
# we will use the `needs` keyword to specify dependencies between jobs.
jobs:
  # This job checks out the code, sets up the AWS SAM CLI, configures AWS credentials,
  # It is the first job in the workflow and must complete before any other jobs can run
  checkout-and-setup:
    
    # The job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest
    
    # Setting environment for the job
    environment:
      name: prod
    
    # Steps to execute in this job
    steps:
    
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3
    
      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          # Use the Node.js version specified in the .nvmrc file
          node-version-file: 'sam-backend-todo-app/.nvmrc'
    
      # Set up SAM CLI
      - name: Set up AWS SAM CLI
        uses: aws-actions/setup-sam@v2

      # set up aws credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      # Install dependencies
      - name: Install dependencies
        run: |
          # Install Node.js dependencies
          npm install

      # validate the SAM template
      - name: Validate SAM template
        run: sam validate --template-file ./template.yaml

      # Build the application using AWS SAM CLI
      - name: Build application
        run: sam build --use-container --template-file ./template.yaml  

      # Upload the build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          include-hidden-files: true
          path: sam-backend-todo-app/.aws-sam/

  test:
    # The job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest
    env:
      # set the env variable for this job
      TODOS_TABLE_NAME: ${{ secrets.TODOS_TABLE_NAME }}
      LOCALSTACK_ENDPOINT: ${{vars.LOCALSTACK_ENDPOINT}}
      AWS_REGION: ${{vars.AWS_REGION}}

    # setting environment for the job
    environment:
      name: prod
    # Define the dependencies
    # runs after the checkout-and-setup stage
    needs: checkout-and-setup
    
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          # Use the Node.js version specified in the .nvmrc file
          node-version-file: 'sam-backend-todo-app/.nvmrc'
      
      # Install dependencies
      - name: Install dependencies
        run: |
          # Install Node.js dependencies
          npm install

      # Setup LocalStack for SAST testing
      - name: Set up LocalStack
        uses: LocalStack/setup-localstack@v0.2.3

      # Load .env variables into the workflow environment
      - name: Export .env to environment
        run: |
          echo "LOCALSTACK_ENDPOINT=${{vars.LOCALSTACK_ENDPOINT}}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{vars.TEST_AWS_ACCESS_KEY_ID}}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{vars.TEST_AWS_SECRET_ACCESS_KEY}}" >> $GITHUB_ENV
          echo "AWS_REGION=${{vars.AWS_REGION}}" >> $GITHUB_ENV
          echo "TODOS_TABLE_NAME=${{vars.TEST_TODOS_TABLE_NAME}}" >> $GITHUB_ENV
        
      # unit test
      - name: Unit test
        run: npm run test:unit
      
      # integration test for createTodoHandler
      - name: Integration test for createTodoHandler
        run: npm run test:int-create
      
      # integration test for getTodoHandler
      - name: Integration test for getTodoHandler
        run: npm run test:int-get
      
      # integration test for updateTodoHandler
      - name: Integration test for updateTodoHandler
        run: npm run test:int-update
      
      # integration test for deleteTodoHandler
      - name: Integration test for deleteTodoHandler
        run: npm run test:int-delete
      
      # lint the code
      - name: Lint code
        run: npm run lint

      # lint and fix code
      - name: Lint and fix code
        run: npm run lint:fix

      # Software Composition Analysis Test - SCA
      - name: SCA Test
        run: npm audit --audit-level=high

      # Lint Infrastructure as Code (IaC)
      - name: IaC Test
        run: |
          # Install cfn-lint
          pip install cfn-lint
          # Run cfn-lint on the SAM template
          cfn-lint template.yaml
      
      # Static Application Security Testing - SAST for IaC
      - name: SAST Test for IaC
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: sam-backend-todo-app/
          file: sam-backend-todo-app/template.yaml

  deploy:

    # The job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest

    # setting environment for the job
    environment:
      name: prod

    # Define the dependencies
    # runs after the test stage
    needs: test

    steps:

      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # set up aws credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # Download the build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: sam-backend-todo-app/.aws-sam/
      
      # deploy the application using AWS SAM CLI
      - name: Deploy application
        run: |
         sam deploy \
            --template-file .aws-sam/build/template.yaml \
            --stack-name sam-secure-todo-app \
            --region ${{vars.AWS_REGION}} \
            --capabilities CAPABILITY_IAM \
            --s3-bucket serverless-secure-todo-app-frontend \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset
              

  # Clean up job to remove build artifacts after deployment
  # This job runs after the deploy job to clean up any build artifacts.
  cleanup:
    # The job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest

    # setting environment for the job
    environment:
      name: prod

    # Define the dependencies
    # runs after the deploy stage
    needs: deploy

    steps:

      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Clean up build artifacts
      - name: Clean up build artifacts
        run: |
          rm -rf sam-backend-todo-app/.aws-sam
          echo "Build artifacts cleaned up." 
